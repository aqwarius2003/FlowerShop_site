import os
import sys
import requests
import logging
from django.conf import settings

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flowershop.settings")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
import django
django.setup()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from flowershopservice.telegram_service import TelegramNotifier
from flowershopservice.models import ShopUser

def test_send_to_chat():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç")
    result = TelegramNotifier.send_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–±—â–∏–π —á–∞—Ç: {result}")
    return result

def test_send_to_user(telegram_id):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    result = TelegramNotifier.send_to_user(
        telegram_id, 
        f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
    )
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {result}")
    return result

def test_direct_api():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API Telegram"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API Telegram")
    token = settings.TELEGRAM_BOT_TOKEN
    chat_id = settings.TELEGRAM_CHAT_ID
    
    if not token or not chat_id:
        logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram")
        return False
        
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å",
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"–û—Ç–≤–µ—Ç API: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return False

def test_delivery_person():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å telegram_id
    delivery_users = ShopUser.objects.filter(
        status='delivery', 
        telegram_id__isnull=False
    ).exclude(telegram_id='')
    
    if not delivery_users.exists():
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å Telegram ID")
        return
        
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {delivery_users.count()}")
    
    for user in delivery_users:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É: {user.full_name} (ID: {user.telegram_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å telegram_id - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
        try:
            int(user.telegram_id)
        except ValueError:
            logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID: {user.telegram_id}")
            continue
        
        result = TelegramNotifier.send_to_user(
            user.telegram_id, 
            f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {user.full_name}"
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")

def test_specific_delivery_person():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –ø–æ –∏–º–µ–Ω–∏"""
    delivery_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ")
    
    if not delivery_name:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return
        
    try:
        user = ShopUser.objects.filter(
            status='delivery', 
            full_name__icontains=delivery_name
        ).first()
        
        if not user:
            logger.warning(f"–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å –∏–º–µ–Ω–µ–º '{delivery_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not user.telegram_id:
            logger.warning(f"–£ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {user.full_name} –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID")
            return
            
        logger.info(f"–ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫: {user.full_name} (ID: {user.telegram_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = TelegramNotifier.send_to_user(
            user.telegram_id, 
            f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {user.full_name}"
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ–±—â–∏–π —á–∞—Ç
    test_send_to_chat()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API
    test_direct_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    test_delivery_person()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
    test_specific_delivery_person()
    
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 