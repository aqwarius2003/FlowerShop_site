from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from .models import Order, Consultation, ShopUser
from .telegram_service import TelegramNotifier
import logging

logger = logging.getLogger(__name__)

@receiver(post_save, sender=Order)
def notify_order_created(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    logger.info(f"Signal received for Order. Created: {created}")
    if created:
        logger.info("–°—Ä–∞–±–æ—Ç–∞–ª —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        message = (
            f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{instance.id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {instance.user.phone}\n"
            f"–ë—É–∫–µ—Ç: {instance.product_name}\n"
            f"–ê–¥—Ä–µ—Å: {instance.delivery_address}"
        )
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # result = TelegramNotifier.send_message(message)
        # logger.info(f"Message sent to main channel: {result}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        send_to_managers(message)

@receiver(pre_save, sender=Order)
def notify_order_status_changed(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–í –¥–æ—Å—Ç–∞–≤–∫–µ".
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if instance.pk:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            current_order = Order.objects.get(pk=instance.pk)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            logger.info(f"–°–∏–≥–Ω–∞–ª pre_save –¥–ª—è –∑–∞–∫–∞–∑–∞ #{instance.id}")
            logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {current_order.status}")
            logger.info(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {instance.status}")
            logger.info(f"–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫: {current_order.delivery_person.full_name if current_order.delivery_person else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
            logger.info(f"–ù–æ–≤—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫: {instance.delivery_person.full_name if instance.delivery_person else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–í –¥–æ—Å—Ç–∞–≤–∫–µ" –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–í –¥–æ—Å—Ç–∞–≤–∫–µ"
            # –ü–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ - –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "inDelivery"
            # –í—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ - –µ—Å–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤—â–∏–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å "inDelivery"
            if ((current_order.status != 'inDelivery' and instance.status == 'inDelivery' and instance.delivery_person is not None) or
                (instance.status == 'inDelivery' and
                 instance.delivery_person is not None and
                 (current_order.delivery_person is None or current_order.delivery_person.id != instance.delivery_person.id))):
                
                logger.info(
                    f"Order #{instance.id} status changed to 'inDelivery'. "
                    f"Sending notification to delivery person: {instance.delivery_person.full_name}"
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                message = (
                    f"üöö –ó–∞–∫–∞–∑ #{instance.id} –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ!\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {instance.user.phone}\n"
                    f"–ë—É–∫–µ—Ç: {instance.product_name}\n"
                    f"–ê–¥—Ä–µ—Å: {instance.delivery_address}\n"
                    f"–î–æ—Å—Ç–∞–≤–∫–∞: {instance.delivery_date.strftime('%d.%m.%Y')}, "
                    f"{instance.delivery_time_from.strftime('%H:%M') if instance.delivery_time_from else '-'} - "
                    f"{instance.delivery_time_to.strftime('%H:%M') if instance.delivery_time_to else '-'}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
                send_to_delivery_person(instance.delivery_person, message)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–∞–∫–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —á—Ç–æ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É
                manager_message = (
                    f"üìã –ó–∞–∫–∞–∑ #{instance.id} –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
                    f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {instance.delivery_person.full_name}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
                    f"–ë—É–∫–µ—Ç: {instance.product_name}"
                )
                send_to_managers(manager_message)
    except Order.DoesNotExist:
        # –ó–∞–∫–∞–∑ –Ω–æ–≤—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    except Exception as e:
        logger.error(f"Error in order status change signal: {str(e)}")

@receiver(post_save, sender=Consultation)
def notify_consultation_created(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""
    logger.info(f"Signal received for Consultation. Created: {created}")
    if created:
        message = (
            f"üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
            f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {instance.user.phone}\n"
            f"–í—Ä–µ–º—è: {instance.creation_date.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # result = TelegramNotifier.send_message(message)
        # logger.info(f"Message sent to main channel: {result}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        send_to_managers(message)

def send_to_managers(message, delay=0.5):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å telegram_id.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id
    managers = ShopUser.objects.filter(
        status='manager',
        telegram_id__isnull=False
    ).exclude(telegram_id='')
    
    if not managers.exists():
        logger.warning("No managers with Telegram ID found")
        return
    
    logger.info(f"Sending notifications to {managers.count()} managers")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    for manager in managers:
        personal_message = (
            f"üëã {manager.full_name}, —É –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n{message}"
        )
        
        try:
            result = TelegramNotifier.send_to_user(
                manager.telegram_id, 
                personal_message
            )
            
            if result:
                logger.info(
                    f"Notification sent to {manager.full_name}"
                )
            else:
                logger.warning(
                    f"Failed to send to {manager.full_name}"
                )
        except Exception as e:
            logger.error(
                f"Error sending to {manager.full_name}: {str(e)}"
            )
            
    # # –ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
    # telegram_ids = [m.telegram_id for m in managers]
    # try:
    #     group_message = f"üì¢ –ì—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n{message}"
    #     results = TelegramNotifier.send_to_multiple_users(
    #         telegram_ids, group_message, delay
    #     )
    #     success = sum(1 for r in results.values() if r)
    #     logger.info(f"Group message: {success}/{len(telegram_ids)} sent")
    # except Exception as e:
    #     logger.error(f"Error in group message: {str(e)}")

def send_to_delivery_person(delivery_person, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.
    
    Args:
        delivery_person: –û–±—ä–µ–∫—Ç ShopUser —Å —Ä–æ–ª—å—é –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if not delivery_person:
        logger.warning("No delivery person specified for notification")
        return
    
    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_person.full_name}")
    logger.info(f"Telegram ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞: {delivery_person.telegram_id}")
    
    if not delivery_person.telegram_id:
        logger.warning(
            f"Delivery person {delivery_person.full_name} has no Telegram ID"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å telegram_id - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
    try:
        int(delivery_person.telegram_id)
    except ValueError:
        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID: {delivery_person.telegram_id}")
        return
    
    personal_message = (
        f"üëã {delivery_person.full_name}, —É –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!\n\n"
        f"{message}"
    )
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_person.full_name} (ID: {delivery_person.telegram_id})")
    
    try:
        result = TelegramNotifier.send_to_user(
            delivery_person.telegram_id, personal_message
        )
        
        if result:
            logger.info(
                f"‚úÖ Delivery notification sent to {delivery_person.full_name}"
            )
        else:
            logger.warning(
                f"‚ùå Failed to send delivery notification to "
                f"{delivery_person.full_name}"
            )
    except Exception as e:
        logger.error(
            f"‚ùå Error sending to delivery person {delivery_person.full_name}: "
            f"{str(e)}"
        )