from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Order, Consultation, ShopUser
from .telegram_service import TelegramNotifier
import logging

logger = logging.getLogger(__name__)

@receiver(post_save, sender=Order)
def notify_order_created(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    logger.info(f"Signal received for Order. Created: {created}")
    if created:
        logger.info("–°—Ä–∞–±–æ—Ç–∞–ª —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        message = (
            f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{instance.id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {instance.user.phone}\n"
            f"–ë—É–∫–µ—Ç: {instance.product_name}\n"
            f"–ê–¥—Ä–µ—Å: {instance.delivery_address}"
        )
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # result = TelegramNotifier.send_message(message)
        # logger.info(f"Message sent to main channel: {result}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        send_to_managers(message)

@receiver(post_save, sender=Consultation)
def notify_consultation_created(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""
    logger.info(f"Signal received for Consultation. Created: {created}")
    if created:
        message = (
            f"üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
            f"–ö–ª–∏–µ–Ω—Ç: {instance.user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {instance.user.phone}\n"
            f"–í—Ä–µ–º—è: {instance.creation_date.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # result = TelegramNotifier.send_message(message)
        # logger.info(f"Message sent to main channel: {result}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        send_to_managers(message)

def send_to_managers(message, delay=0.5):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å telegram_id.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id
    managers = ShopUser.objects.filter(
        status='manager',
        telegram_id__isnull=False
    ).exclude(telegram_id='')
    
    if not managers.exists():
        logger.warning("No managers with Telegram ID found")
        return
    
    logger.info(f"Sending notifications to {managers.count()} managers")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    for manager in managers:
        personal_message = (
            f"üëã {manager.full_name}, —É –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n{message}"
        )
        
        try:
            result = TelegramNotifier.send_to_user(
                manager.telegram_id, 
                personal_message
            )
            
            if result:
                logger.info(
                    f"Notification sent to {manager.full_name}"
                )
            else:
                logger.warning(
                    f"Failed to send to {manager.full_name}"
                )
        except Exception as e:
            logger.error(
                f"Error sending to {manager.full_name}: {str(e)}"
            )
            
    # # –ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
    # telegram_ids = [m.telegram_id for m in managers]
    # try:
    #     group_message = f"üì¢ –ì—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤!\n\n{message}"
    #     results = TelegramNotifier.send_to_multiple_users(
    #         telegram_ids, group_message, delay
    #     )
    #     success = sum(1 for r in results.values() if r)
    #     logger.info(f"Group message: {success}/{len(telegram_ids)} sent")
    # except Exception as e:
    #     logger.error(f"Error in group message: {str(e)}")